


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

export function Model(props) {
  const { nodes, materials } = useGLTF("/key2.glb");
  const ref = useRef()
  
  useFrame((_, delta) => {
   
    ref.current.rotation.z += 0.5 * delta
  })

  let camera = useThree(state => state.camera);
  let scene = useThree((state) => state.scene);
  let scene2 = useThree((state) => state);


  useLayoutEffect(() => {
    camera.position.set(9, 1.4, 29);

    scene.rotation.set(0,0,0)
 console.log(scene.rotation)
 console.log(scene2)
  let fov = camera.fov;
  fov = (1200 * 18)/ window.innerWidth;
  camera.fov = fov;
  camera.updateProjectionMatrix();
  
  
   
  
  }, [])

  return (
    <group {...props} dispose={null}>
   
      <group position={[2.81, 1.45, 0.81]} rotation={[Math.PI / 2, 0, -0.83]} scale={1.01}  ref={ref}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Torus.geometry}
          material={materials.body}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Torus_1.geometry}
          material={materials["Material.001"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Key.geometry}
        material={materials.key}
        position={[1.77, 0.08, 1.99]}
        rotation={[0, 0, -0.02]}
      />
    </group>
  );
}

useGLTF.preload("/key2.glb");
